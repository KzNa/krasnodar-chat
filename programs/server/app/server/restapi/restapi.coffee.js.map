{"version":3,"sources":["meteor://ğŸ’»app/server/restapi/restapi.coffee"],"names":[],"mappings":"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","file":"/server/restapi/restapi.coffee.js","sourcesContent":["Api = new Restivus\n\tuseDefaultAuth: true\n\tprettyJson: true\n\tenableCors: false\n\n\nApi.addRoute 'info', authRequired: false,\n\tget: -> RocketChat.Info\n\n\nApi.addRoute 'version', authRequired: false,\n\tget: ->\n\t\tversion = {api: '0.1', rocketchat: '0.5'}\n\t\tstatus: 'success', versions: version\n\nApi.addRoute 'publicRooms', authRequired: true,\n\tget: ->\n\t\trooms = RocketChat.models.Rooms.findByType('c', { sort: { msgs:-1 } }).fetch()\n\t\tstatus: 'success', rooms: rooms\n\n# join a room\nApi.addRoute 'rooms/:id/join', authRequired: true,\n\tpost: ->\n\t\tMeteor.runAsUser this.userId, () =>\n\t\t\tMeteor.call('joinRoom', @urlParams.id)\n\t\tstatus: 'success'   # need to handle error\n\n# leave a room\nApi.addRoute 'rooms/:id/leave', authRequired: true,\n\tpost: ->\n\t\tMeteor.runAsUser this.userId, () =>\n\t\t\tMeteor.call('leaveRoom', @urlParams.id)\n\t\tstatus: 'success'   # need to handle error\n\n\n# get messages in a room\nApi.addRoute 'rooms/:id/messages', authRequired: true,\n\tget: ->\n\t\ttry\n\t\t\tif Meteor.call('canAccessRoom', @urlParams.id, this.userId)\n\t\t\t\tmsgs = RocketChat.models.Messages.findVisibleByRoomId(@urlParams.id, {sort: {ts: -1}, limit: 50}).fetch()\n\t\t\t\tstatus: 'success', messages: msgs\n\t\t\telse\n\t\t\t\tstatusCode: 403   # forbidden\n\t\t\t\tbody: status: 'fail', message: 'Cannot access room.'\n\t\tcatch e\n\t\t\tstatusCode: 400    # bad request or other errors\n\t\t\tbody: status: 'fail', message: e.name + ' :: ' + e.message\n\n\n\n# send a message in a room -  POST body should be { \"msg\" : \"this is my message\"}\nApi.addRoute 'rooms/:id/send', authRequired: true,\n\tpost: ->\n\t\tMeteor.runAsUser this.userId, () =>\n\t\t\tconsole.log @bodyParams.msg\n\t\t\tMeteor.call('sendMessage', {msg: this.bodyParams.msg, rid: @urlParams.id} )\n\t\tstatus: 'success'\t#need to handle error\n\n\n# validate an array of users\nApi.testapiValidateUsers =  (users) ->\n\tfor user, i in users\n\t\tif user.name?\n\t\t\tif user.email?\n\t\t\t\tif user.pass?\n\t\t\t\t\ttry\n\t\t\t\t\t\tnameValidation = new RegExp '^' + RocketChat.settings.get('UTF8_Names_Validation') + '$', 'i'\n\t\t\t\t\tcatch\n\t\t\t\t\t\tnameValidation = new RegExp '^[0-9a-zA-Z-_.]+$', 'i'\n\n\t\t\t\t\tif nameValidation.test user.name\n\t\t\t\t\t\tif  /\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]+\\b/i.test user.email\n\t\t\t\t\t\t\tcontinue\n\t\tthrow new Meteor.Error 'invalid-user-record', \"[restapi] bulk/register -> record #\" + i + \" is invalid\"\n\treturn\n\n\n###\n@api {post} /bulk/register  Register multiple users based on an input array.\n@apiName register\n@apiGroup TestAndAdminAutomation\n@apiVersion 0.0.1\n@apiDescription  Caller must have 'testagent' or 'adminautomation' role.\nNOTE:   remove room is NOT recommended; use Meteor.reset() to clear db and re-seed instead\n@apiParam {json} rooms An array of users in the body of the POST.\n@apiParamExample {json} POST Request Body example:\n  {\n    'users':[ {'email': 'user1@user1.com',\n               'name': 'user1',\n               'pass': 'abc123' },\n              {'email': 'user2@user2.com',\n               'name': 'user2',\n               'pass': 'abc123'},\n              ...\n            ]\n  }\n@apiSuccess {json} ids An array of IDs of the registered users.\n@apiSuccessExample {json} Success-Response:\n  HTTP/1.1 200 OK\n  {\n    'ids':[ {'uid': 'uid_1'},\n            {'uid': 'uid_2'},\n            ...\n    ]\n  }\n###\nApi.addRoute 'bulk/register', authRequired: true,\n\tpost:\n\t\t# restivus 0.8.4 does not support alanning:roles using groups\n\t\t#roleRequired: ['testagent', 'adminautomation']\n\t\taction: ->\n\t\t\tif RocketChat.authz.hasPermission(@userId, 'bulk-register-user')\n\t\t\t\ttry\n\n\t\t\t\t\tApi.testapiValidateUsers  @bodyParams.users\n\t\t\t\t\tthis.response.setTimeout (500 * @bodyParams.users.length)\n\t\t\t\t\tids = []\n\t\t\t\t\tendCount = @bodyParams.users.length - 1\n\t\t\t\t\tfor incoming, i in @bodyParams.users\n\t\t\t\t\t \tids[i] = {uid: Meteor.call 'registerUser', incoming}\n\t\t\t\t\t \tMeteor.runAsUser ids[i].uid, () =>\n\t\t\t\t\t \t\tMeteor.call 'setUsername', incoming.name\n\t\t\t\t\t \t\tMeteor.call 'joinDefaultChannels'\n\n\t\t\t\t\tstatus: 'success', ids: ids\n\t\t\t\tcatch e\n\t\t\t\t\tstatusCode: 400    # bad request or other errors\n\t\t\t\t\tbody: status: 'fail', message: e.name + ' :: ' + e.message\n\t\t\telse\n\t\t\t\tconsole.log '[restapi] bulk/register -> '.red, \"User does not have 'bulk-register-user' permission\"\n\t\t\t\tstatusCode: 403\n\t\t\t\tbody: status: 'error', message: 'You do not have permission to do this'\n\n\n\n\n# validate an array of rooms\nApi.testapiValidateRooms =  (rooms) ->\n\tfor room, i in rooms\n\t\tif room.name?\n\t\t\tif room.members?\n\t\t\t\tif room.members.length > 1\n\t\t\t\t\ttry\n\t\t\t\t\t\tnameValidation = new RegExp '^' + RocketChat.settings.get('UTF8_Names_Validation') + '$', 'i'\n\t\t\t\t\tcatch\n\t\t\t\t\t\tnameValidation = new RegExp '^[0-9a-zA-Z-_.]+$', 'i'\n\n\t\t\t\t\tif nameValidation.test room.name\n\t\t\t\t\t\tcontinue\n\t\tthrow new Meteor.Error 'invalid-room-record', \"[restapi] bulk/createRoom -> record #\" + i + \" is invalid\"\n\treturn\n\n\n###\n@api {post} /bulk/createRoom Create multiple rooms based on an input array.\n@apiName createRoom\n@apiGroup TestAndAdminAutomation\n@apiVersion 0.0.1\n@apiParam {json} rooms An array of rooms in the body of the POST. 'name' is room name, 'members' is array of usernames\n@apiParamExample {json} POST Request Body example:\n  {\n    'rooms':[ {'name': 'room1',\n               'members': ['user1', 'user2']\n  \t      },\n  \t      {'name': 'room2',\n               'members': ['user1', 'user2', 'user3']\n              }\n              ...\n            ]\n  }\n@apiDescription  Caller must have 'testagent' or 'adminautomation' role.\nNOTE:   remove room is NOT recommended; use Meteor.reset() to clear db and re-seed instead\n\n@apiSuccess {json} ids An array of ids of the rooms created.\n@apiSuccessExample {json} Success-Response:\n  HTTP/1.1 200 OK\n  {\n    'ids':[ {'rid': 'rid_1'},\n            {'rid': 'rid_2'},\n            ...\n    ]\n  }\n###\nApi.addRoute 'bulk/createRoom', authRequired: true,\n\tpost:\n\t\t# restivus 0.8.4 does not support alanning:roles using groups\n\t\t#roleRequired: ['testagent', 'adminautomation']\n\t\taction: ->\n\t\t\t# user must also have create-c permission because\n\t\t\t# createChannel method requires it\n\t\t\tif RocketChat.authz.hasPermission(@userId, 'bulk-create-c')\n\t\t\t\ttry\n\t\t\t\t\tthis.response.setTimeout (1000 * @bodyParams.rooms.length)\n\t\t\t\t\tApi.testapiValidateRooms @bodyParams.rooms\n\t\t\t\t\tids = []\n\t\t\t\t\tMeteor.runAsUser this.userId, () =>\n\t\t\t\t\t\t(ids[i] = Meteor.call 'createChannel', incoming.name, incoming.members) for incoming,i in @bodyParams.rooms\n\t\t\t\t\tstatus: 'success', ids: ids   # need to handle error\n\t\t\t\tcatch e\n\t\t\t\t\tstatusCode: 400    # bad request or other errors\n\t\t\t\t\tbody: status: 'fail', message: e.name + ' :: ' + e.message\n\t\t\telse\n\t\t\t\tconsole.log '[restapi] bulk/createRoom -> '.red, \"User does not have 'bulk-create-c' permission\"\n\t\t\t\tstatusCode: 403\n\t\t\t\tbody: status: 'error', message: 'You do not have permission to do this'\n\n\n\n"]}