{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_cas/cas_rocketchat.js","meteor://ðŸ’»app/packages/rocketchat_cas/cas_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H","file":"/packages/rocketchat_cas.js","sourcesContent":["logger = new Logger('CAS', {});\n\nMeteor.startup(function(){\n    RocketChat.settings.addGroup('CAS', function() {\n        this.add(\"CAS_enabled\", false, { type: 'boolean', group: 'CAS', public: true });\n        this.add(\"CAS_base_url\" , '' , { type: 'string' , group: 'CAS', public: true });\n        this.add(\"CAS_login_url\" , '' , { type: 'string' , group: 'CAS', public: true });\n        this.add(\"CAS_version\" , '1.0' , { type: 'select', values: [{ key: '1.0', i18nLabel: '1.0'}], group: 'CAS' });\n\n        this.section('CAS Login Layout', function() {\n            this.add(\"CAS_popup_width\" , '810' , { type: 'string' , group: 'CAS', public: true });\n            this.add(\"CAS_popup_height\" , '610' , { type: 'string' , group: 'CAS', public: true });\n            this.add(\"CAS_button_label_text\" , 'CAS' , { type: 'string' , group: 'CAS'});\n            this.add(\"CAS_button_label_color\", '#FFFFFF' , { type: 'color' , group: 'CAS'});\n            this.add(\"CAS_button_color\" , '#13679A' , { type: 'color' , group: 'CAS'});\n            this.add(\"CAS_autoclose\", true , { type: 'boolean' , group: 'CAS'});\n        });\n    });\n});\n    \ntimer = undefined\n\nfunction updateServices(record) { \n    if( typeof timer != 'undefined' ) {\n        Meteor.clearTimeout(timer);\n    }\n\n    timer = Meteor.setTimeout(function() {\n        data = {\n            // These will pe passed to 'node-cas' as options\n            enabled:          RocketChat.settings.get(\"CAS_enabled\"),\n            base_url:         RocketChat.settings.get(\"CAS_base_url\"),\n            login_url:        RocketChat.settings.get(\"CAS_login_url\"),\n            // Rocketchat Visuals\n            buttonLabelText:  RocketChat.settings.get(\"CAS_button_label_text\"),\n            buttonLabelColor: RocketChat.settings.get(\"CAS_button_label_color\"),\n            buttonColor:      RocketChat.settings.get(\"CAS_button_color\"),\n            width:            RocketChat.settings.get(\"CAS_popup_width\"),\n            height:           RocketChat.settings.get(\"CAS_popup_height\"),\n            autoclose:        RocketChat.settings.get(\"CAS_autoclose\"),\n        };\n\n        // Either register or deregister the CAS login service based upon its configuration\n        if( data.enabled ) {\n            logger.info(\"Enabling CAS login service\")\n            ServiceConfiguration.configurations.upsert({service: 'cas'}, { $set: data });\n        } else {\n            logger.info(\"Disabling CAS login service\");\n            ServiceConfiguration.configurations.remove({service: 'cas'});\n        }\n    }, 2000);\n};\n\nfunction check_record (record) {\n    if( /^CAS_.+/.test( record._id )){\n        updateServices( record );\n    }\n};\n\nRocketChat.models.Settings.find().observe({\n    added: check_record,\n    changed: check_record,\n    removed: check_record\n});\n","var Fiber = Npm.require('fibers');\nvar url = Npm.require('url');\nvar CAS = Npm.require('cas');\n\nvar _casCredentialTokens = {};\n\nRoutePolicy.declare('/_cas/', 'network');\n\n// Listen to incoming OAuth http requests\nWebApp.connectHandlers.use(function(req, res, next) {\n    // Need to create a Fiber since we're using synchronous http calls and nothing\n    // else is wrapping this in a fiber automatically\n    Fiber(function () {\n        middleware(req, res, next);\n    }).run();\n});\n\nvar middleware = function (req, res, next) {\n    // Make sure to catch any exceptions because otherwise we'd crash\n    // the runner\n    try {\n        var barePath = req.url.substring(0, req.url.indexOf('?'));\n        var splitPath = barePath.split('/');\n\n        // Any non-cas request will continue down the default\n        // middlewares.\n        if (splitPath[1] !== '_cas') {\n            next();\n            return;\n        }\n\n        // get auth token\n        var credentialToken = splitPath[2];\n        if (!credentialToken) {\n            closePopup(res);\n            return;\n        }\n\n        // validate ticket\n        casTicket(req, credentialToken, function() {\n            closePopup(res);\n        });\n\n    } catch (err) {\n        logger.error(\"Unexpected error : \" + err.message);\n        closePopup(res);\n    }\n};\n\nvar casTicket = function (req, token, callback) {\n\n    // get configuration\n    if (!RocketChat.settings.get(\"CAS_enabled\")) {\n        logger.error(\"Got ticket validation request, but CAS is not enabled\");\n        callback();\n    }\n\n    // get ticket and validate.\n    var parsedUrl = url.parse(req.url, true);\n    var ticketId = parsedUrl.query.ticket;\n    var baseUrl = RocketChat.settings.get(\"CAS_base_url\");\n    logger.debug(\"Using CAS_base_url: \" + baseUrl);\n\n    var cas = new CAS({\n        base_url: baseUrl,\n        service: Meteor.absoluteUrl() + \"_cas/\" + token\n    });\n\n    cas.validate(ticketId, function(err, status, username) {\n        if (err) {\n            logger.error(\"error when trying to validate \" + err);\n        } else {\n            if (status) {\n                logger.info(\"Validated user: \" + username);\n                _casCredentialTokens[token] = { id: username };\n            } else {\n                logger.error(\"Unable to validate ticket: \" + ticketId);\n            }\n        }\n\n        callback();\n  });\n\n  return; \n};\n\n/*\n * Register a server-side login handle.\n * It is call after Accounts.callLoginMethod() is call from client.\n *\n */\n Accounts.registerLoginHandler(function (options) {\n\n    if (!options.cas)\n        return undefined;\n\n    if (!_hasCredential(options.cas.credentialToken)) {\n        throw new Meteor.Error(Accounts.LoginCancelledError.numericError,\n        'no matching login attempt found');\n    }\n\n    var result = _retrieveCredential(options.cas.credentialToken);\n    var options = { profile: { name: result.id } };\n\n    // Search existing user by its external service id\n    logger.debug(\"Looking up user with username: \" + result.id );\n    var user = Meteor.users.findOne({ 'services.cas.external_id': result.id });\n\n    if (user) {\n        logger.debug(\"Using existing user for '\" + result.id + \"' with id: \" + user._id);\n    } else {\n\n        // Define new user\n        var newUser = {\n            username: result.id,\n            active: true,\n            globalRoles: ['user'],\n            services: {\n                cas: {\n                    external_id: result.id\n                }\n            }\n        };\n\n        // Create the user\n        logger.debug(\"User '\" + result.id + \"'does not exist yet, creating it\");\n        var userId = Accounts.insertUserDoc({}, newUser);\n\n        // Fetch and use it\n        user = Meteor.users.findOne(userId);\n        logger.debug(\"Created new user for '\" + result.id + \"' with id: \" + user._id);\n\n        logger.debug('Joining user to default channels');\n        Meteor.runAsUser(user._id, function() {\n            Meteor.call('joinDefaultChannels');\n        });\n\n    }\n\n    return { userId: user._id };\n});\n\nvar _hasCredential = function(credentialToken) {\n    return _.has(_casCredentialTokens, credentialToken);\n}\n\n/*\n * Retrieve token and delete it to avoid replaying it.\n */\nvar _retrieveCredential = function(credentialToken) {\n    var result = _casCredentialTokens[credentialToken];\n    delete _casCredentialTokens[credentialToken];\n    return result;\n}\n\nvar closePopup = function(res) {\n    res.writeHead(200, {'Content-Type': 'text/html'});\n    var content = '<html><head><script>window.close()</script></head></html>';\n    res.end(content, 'utf-8');\n}\n"]}